Task format:
* TODO, incomplete
+ TODO, complete
- TODO, blocked

Each task must be a single line
Everything else is treated as a comment and ignored.

Commands:
* devlog-edit: open latest devlog in $EDITOR, creating a new one if it doesn't exist.
* devlog-rollover: copy incomplete tasks from the previous devlog to a new devlog.
* devlog-tail: show latest devlogs in descending order by time
* devlog-status: show completed tasks from previous devlog, incomplete tasks from current devlog

Files are sequential, named by datetime of creation with millisecond precision.
Devlog directory is in $DEVLOG_DIR, defaults to $HOME/devlogs
Acquire a lock file to ensure that the tool doesn't race to create the new file.

Status command has a parameter `--history=1` that controls the number of previous
devlog files to include in the "previous" section.  The previous section includes
only completed tasks; the current section includes all tasks.

Both devlog-tail and devlog-status accept the parameter `--format=text|json` that controls the output format.  Can pipe the status JSON to another program to customize, post to Slack, sync Remember the Milk, etc.

Hooks (for stuff like JIRA/Github integration, parsing additional metadata from files, etc):
* post-create PATH_TO_NEW_DEVLOG
* pre-edit PATH_TO_DEVLOG
* post-edit PATH_TO_DEVLOG
* pre-rollover PATH_TO_OLD_DEVLOG
* post-rollover PATH_TO_OLD_DEVLOG PATH_TO_NEW_DEVLOG

Hooks are configured as environment variables pointing to some program to execute (bash script, python, whatever).  Hooks can use the provided Rust library to parse the devlog files, or implement the parser themselves (since the format is simple and documented).

Other stuff, nice to haves
* package managers (brew, apt-get, dnf, pacman)
* homepage, tutorials
* syntax highlighting for the format in vim
* folding in vim
